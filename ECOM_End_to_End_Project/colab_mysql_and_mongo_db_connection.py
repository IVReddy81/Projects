# -*- coding: utf-8 -*-
"""MayankEcomProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bIfmyeGgdIzkeMl36W4zcuqzO3MkxjcD
"""

print("hello")

#installing MySql Conector
!pip install mysql-connector-python

"""#Explanation of connection code
This code snippet establishes a connection to a MySQL database and prints information about the connection and the connected database.

Here's a breakdown:

1.  **Import necessary libraries**: It imports the `mysql.connector` library and the `Error` class from it to handle potential connection errors.
2.  **Define connection parameters**: It sets variables for the `hostname`, `database`, `port`, `username`, and `password` required to connect to the MySQL server.
3.  **Establish connection**: It uses a `try...except` block to attempt to connect to the database using the provided credentials.
4.  **Check connection and get info**: If the connection is successful, it checks if the connection is active using `connection.is_connected()`, retrieves the server information using `connection.get_server_info()`, and prints it.
5.  **Execute SQL query**: It creates a cursor object to execute SQL commands, executes a query to get the current database name, and fetches the result.
6.  **Print database name**: It prints the name of the connected database.
7.  **Handle errors**: If an error occurs during the connection process, it prints an error message.
8.  **Close connection**: In the `finally` block, which always executes, it checks if the connection is still open and, if so, closes the cursor and the connection to release resources.
"""

import mysql.connector
from mysql.connector import Error

hostname = "2wh2ue.h.filess.io"
database = "mysql_signeager"
port = "3307"
username = "mysql_signeager"
password = "ac86df6155972e5f57f6f6c5b7b7ed842df3833c"

try:
    connection = mysql.connector.connect(host=hostname, database=database, user=username, password=password, port=port)
    if connection.is_connected():
        db_Info = connection.get_server_info()
        print("Connected to MySQL Server version ", db_Info)
        cursor = connection.cursor()
        cursor.execute("select database();")
        record = cursor.fetchone()
        print("You're connected to database: ", record)

except Error as e:
    print("Error while connecting to MySQL", e)
finally:
    if connection.is_connected():
        cursor.close()
        connection.close()
        print("MySQL connection is closed")

import pandas as pd
payments_df=pd.read_csv("olist_order_payments_dataset.csv")
payments_df.head()

import pandas as pd
import mysql.connector
from mysql.connector import Error

# Connection details
hostname = "2wh2ue.h.filess.io"
databasec= "mysql_signeager"
port = "3307"
username = "mysql_signeager"
password = "ac86df6155972e5f57f6f6c5b7b7ed842df3833c"

# CSV file path
csv_file_path = "olist_order_payments_dataset.csv"

# Table name where the data will be uploaded
table_name = "olist_order_payments"

try:
    # Step 1: Establish a connection to MySQL server
    connection = mysql.connector.connect(
        host=hostname,
        database=database,
        user=username,
        password=password,
        port=port
    )
    if connection.is_connected():
        print("Connected to MySQL Server successfully!")

        # Step 2: Create a cursor to execute SQL queries
        cursor = connection.cursor()

        # Step 3: Drop table if it already exists (for clean insertion)
        cursor.execute(f"DROP TABLE IF EXISTS {table_name};")
        print(f"Table `{table_name}` dropped if it existed.")

        # Step 4: Create a table structure to match CSV file
        create_table_query = f"""
        CREATE TABLE {table_name} (
            order_id VARCHAR(50),
            payment_sequential INT,
            payment_type VARCHAR(20),
            payment_installments INT,
            payment_value FLOAT
        );
        """
        cursor.execute(create_table_query)
        print(f"Table `{table_name}` created successfully!")

        # Step 5: Load the CSV data into pandas DataFrame
        data = pd.read_csv(csv_file_path)
        print("CSV data loaded into pandas DataFrame.")

        # Step 6: Insert data in batches of 500 records
        batch_size = 500  # Define the batch size
        total_records = len(data)  # Get total records in the DataFrame

        print(f"Starting data insertion into `{table_name}` in batches of {batch_size} records.")
        for start in range(0, total_records, batch_size):
            end = start + batch_size
            batch = data.iloc[start:end]  # Get the current batch of records

            # Convert batch to list of tuples for MySQL insertion
            batch_records = [
                tuple(row) for row in batch.itertuples(index=False, name=None)
            ]

            # Prepare the INSERT query
            insert_query = f"""
            INSERT INTO {table_name}
            (order_id, payment_sequential, payment_type, payment_installments, payment_value)
            VALUES (%s, %s, %s, %s, %s);
            """

            # Execute the insertion query for the batch
            cursor.executemany(insert_query, batch_records)
            connection.commit()  # Commit after each batch
            print(f"Inserted records {start + 1} to {min(end, total_records)} successfully.")

        print(f"All {total_records} records inserted successfully into `{table_name}`.")

except Error as e:
    # Step 7: Handle any errors
    print("Error while connecting to MySQL or inserting data:", e)

finally:
    # Step 8: Close the cursor and connection
    if connection.is_connected():
        cursor.close()
        connection.close()
        print("MySQL connection is closed.")

"""#creating connection to mongo DB"""

!pip install pymongo

"""This code snippet connects to a MongoDB database using the `pymongo` library.

Here's a breakdown:

1.  **Import necessary libraries**: It imports the `MongoClient` class from the `pymongo` library.
2.  **Define connection parameters**: It sets variables for the `hostname`, `database`, `port`, `username`, and `password` required to connect to the MongoDB server.
3.  **Construct the connection URI**: It creates a connection string (`uri`) in the format `mongodb://username:password@hostname:port/database`.
4.  **Connect to MongoDB**: It uses the `MongoClient` class with the constructed `uri` to establish a connection to the MongoDB server.
5.  **Access the database**: It accesses the specified database using `client[database]` and assigns it to the `mydatabase` variable.

After running this code, you will have a connection to your MongoDB database and can start interacting with your collections and documents.
"""

# importing module
from pymongo import MongoClient

hostname = "gdgskp.h.filess.io"
database = "mongodb_fireblank"
port = "27018"
username = "mongodb_fireblank"
password = "dcbde0733a2f7c1ad344fc780e0e5385416cb210"

uri = "mongodb://" + username + ":" + password + "@" + hostname + ":" + port + "/" + database

# Connect with the portnumber and host
client = MongoClient(uri)

# Access database
mydatabase = client[database]
print("mydataase")

# prompt: write a python code to read the csv file product_category_name_translation.csv and insert records to mondoDB

import pandas as pd
# Assuming the file product_category_name_translation.csv is uploaded to your Colab environment
csv_file_path_mongo = "product_category_name_translation.csv"
mongo_collection_name = "product_categories"

try:
    # Step 1: Load the CSV data into pandas DataFrame
    data_mongo = pd.read_csv(csv_file_path_mongo)
    print(f"CSV data '{csv_file_path_mongo}' loaded into pandas DataFrame for MongoDB insertion.")

    # Step 2: Convert DataFrame to a list of dictionaries
    records_mongo = data_mongo.to_dict('records')

    # Step 3: Access the specific collection in MongoDB
    mycollection = mydatabase[mongo_collection_name]

    # Step 4: Insert the records into the MongoDB collection
    if records_mongo: # Check if there are records to insert
        insert_result = mycollection.insert_many(records_mongo)
        print(f"Inserted {len(insert_result.inserted_ids)} documents into MongoDB collection '{mongo_collection_name}'.")
    else:
        print("No records to insert from the CSV file.")

except FileNotFoundError:
    print(f"Error: The file '{csv_file_path_mongo}' was not found.")
except Exception as e:
    print(f"Error inserting data into MongoDB: {e}")
finally:
    # Step 5: Close the MongoDB connection
    if 'client' in locals() and client:
        client.close()
        print("MongoDB connection closed.")

